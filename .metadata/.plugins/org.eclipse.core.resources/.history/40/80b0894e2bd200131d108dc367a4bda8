import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;

import jade.core.*;
import jade.core.behaviours.TickerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;

public class UserManagerAgent extends Agent{
	
	private Vector<Movement> moves;
	private int movementQuantums=0;
	
	protected void setup() {
		System.out.println("UserManagerAgent :	" + getAID().getName()
				+ " is ready.");
		Object[] args = getArguments();
		if (args != null && args.length > 0) {
			String inputFile = (String) args[0];
			System.out.println("Trying to parse " + inputFile);
			try 
			{
				parseUserRoutes(inputFile);
			} catch (FileNotFoundException e) 
			{	
				e.printStackTrace();
			}
			
			//User movement behaviour
			addBehaviour(new TickerBehaviour(this, 2000) {
				
				protected void onTick() {
					movementQuantums++;
					System.out.println("UserManagerAgent: Quantum " + movementQuantums);
//				
//					DFAgentDescription template = new DFAgentDescription();
//					ServiceDescription sd = new ServiceDescription();
//					sd.setName("C1");
//					template.addServices(sd);
//					try {
//						DFAgentDescription[] result = DFService.search(ellAgent,
//								template);
//						System.out
//								.println("Found the following cell agents:");
//						AID[] cellAgents = new AID[result.length];
//
//						for (int i = 0; i < result.length; ++i) {
//							cellAgents[i] = result[i].getName();
//							System.out.println(cellAgents[i].getName());
//						}
//					} catch (FIPAException fe) {
//						fe.printStackTrace();
//					}
					
				     ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
				     msg.setContent( "bla...bla...bla" );
				     msg.addReceiver( new AID( "C" + 2, AID.ISLOCALNAME) );
				     send(msg);
					
					
				}
			});
			
		} else {
			System.out.println("No input file specified");
			doDelete();
		}
	}
	
	//Method to parse the routes of users
	void parseUserRoutes(String inputFile) throws FileNotFoundException
	{
		Scanner sc = new Scanner(new File(inputFile));
		List<String> lines = new ArrayList<String>();
		while (sc.hasNextLine()) {
		  lines.add(sc.nextLine());
		}

		String[] arr = lines.toArray(new String[0]);
		for(String a:arr)
		{
			//System.out.println(a);
			String[] splitted = a.split(" ");
			{
				Movement m=new Movement();
				m.User=splitted[0];
			}
		}

	}

}
