import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;

import org.apache.commons.collections15.Transformer;
import org.apache.commons.collections15.functors.ConstantTransformer;

import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;
import edu.uci.ics.jung.visualization.renderers.BasicEdgeRenderer;

public class JFrameManager {

	private static JFrame frameInstance = new JFrame("CellularNet Visualization");
	private static BasicVisualizationServer<String,String> vv;
	private static JLabel quantumLabel = new JLabel("Quantum: 0");
	private static JPanel graphPanel = new JPanel();
	private static JPanel uiPanel = new JPanel();
	private static DefaultListModel<String> groupListModel = new DefaultListModel<String>();
	private static JList<String> groupList = new JList<String>(groupListModel);
	private static DefaultListModel<String> nodeListModel = new DefaultListModel<String>();
	private static JList<String> nodeList = new JList<String>(nodeListModel);

	private static int currentQuantum = 0;
	
	private static Layout<String, String> layout;
	
	private static List<String> edges = new ArrayList<String>();
	private static final int dimensionX = 600;
	private static final int dimensionY = 590;
	private static String inputFile = "";
	
	static
	{
		new CellularGraphView("");
		layout = new CircleLayout<String, String>(CellularGraphView.g);
	    layout.setSize(new Dimension(dimensionX, dimensionY)); 
	    vv = new BasicVisualizationServer<String,String>(layout);
	    
	    groupList.setVisibleRowCount(5);
	    groupList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	    groupList.setPreferredSize(new Dimension(200,200));
	    nodeList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	    nodeList.setPreferredSize(new Dimension(200,200));
	}
	
	public static void setup()
	{
		synchronized(frameInstance)
		{
			if(frameInstance.isVisible() == false)
			{

				frameInstance.setLayout(new FlowLayout());
				RelativeLayout uiLayout = new RelativeLayout(RelativeLayout.Y_AXIS, 15);
				uiLayout.setAlignment(RelativeLayout.LEADING);
				uiLayout.setBorderGap(5);
				uiPanel.setLayout(uiLayout);
				graphPanel.setPreferredSize(new Dimension(600, 600));
				uiPanel.setPreferredSize(new Dimension(200, 600));
				frameInstance.add(graphPanel);
				frameInstance.add(uiPanel);
				frameInstance.setResizable(false);

				if(inputFile != null && !inputFile.isEmpty())
				{
					setupGraph(inputFile);	
					graphPanel.add(vv); 
				}
	
				uiPanel.add(quantumLabel);
				uiPanel.add(new JLabel("Detected groups:"));
				
				uiPanel.add(groupList);
				
				uiPanel.add(new JLabel("Users in node:"));
				
				uiPanel.add(nodeList);
				
				
				frameInstance.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frameInstance.pack();
				frameInstance.setVisible(true);
			}
			
		}
	}
	
	public static void setInputFile(String filename)
	{

		synchronized(inputFile) {
			if(inputFile == "")
			{
				inputFile= filename;
				setupGraph(inputFile);
				vv.repaint();
				graphPanel.repaint();
			}
		}	

		synchronized(frameInstance) 
		{
			frameInstance.pack();
		}
	}
	
	public static void visualizeMovement(final MovementRecord mov)
	{
		synchronized(frameInstance)
		{
			if(mov != null)
			{
				synchronized(edges)
				{
					if(CellularGraphView.g.containsVertex(mov.cellFrom))
					{
						// draw number of users moved on edge
				        edges = new ArrayList<String>(CellularGraphView.g.getEdges());

						ListIterator<String> iter = edges.listIterator();

						try{
							while(iter.hasNext())
							{
								// remove edge
								String itEdge = iter.next();
								if(itEdge.contains(mov.cellFrom+'-'+mov.cellTo))
								{
									CellularGraphView.g.removeEdge(itEdge);
								}
							}
						} catch(Exception ex)
						{
							ex.printStackTrace();
						}
							
						// add updated edge
						CellularGraphView.g.removeEdge(mov.cellFrom+'-'+mov.cellTo);
						
						
						CellularGraphView.g.addEdge(mov.cellFrom+'-'+mov.cellTo+" " + mov.movementQuantums.size(),mov.cellFrom, mov.cellTo, EdgeType.DIRECTED);
						layout = new CircleLayout<String, String>(CellularGraphView.g);
						
						vv.repaint();
						frameInstance.pack();
					}
				}
			}
		}
		updateQuantum(currentQuantum );
	}
	
	public static void updateCellUserCount(String cellName, int newSize)
	{
		synchronized(nodeListModel)
		{
			ArrayList<Object> objs = new ArrayList<Object>(Arrays.asList(nodeListModel.toArray()));
			ListIterator<Object> objIter = objs.listIterator();
				
			while(objIter.hasNext())
			{
				String str = objIter.next().toString(); 
				if(!str.contains(cellName))
				{
					strs.add(str);
				}
			}
		}
		
//		synchronized(nodeListModel)
//		{
//			ArrayList<String> strs = new ArrayList<String>();
//			ArrayList<Object> objs = new ArrayList<Object>(Arrays.asList(nodeListModel.toArray()));
//			ListIterator<Object> objIter = objs.listIterator();
//			nodeListModel.removeAllElements();
//				
//			while(objIter.hasNext())
//			{
//				String str = objIter.next().toString(); 
//				if(!str.contains(cellName))
//				{
//					strs.add(str);
//				}
//			}
//			strs.add(cellName + " "+ newSize);
//				
//			java.util.Collections.sort(strs);
//			ListIterator<String> iter = strs.listIterator();
//				
//			while(iter.hasNext())
//			{
//				nodeListModel.addElement(iter.next().toString());		
//			}
//		}
	}
	
	public static void updateQuantum(int quantum)
	{
		synchronized (frameInstance) {
			if(quantum != currentQuantum)
			{
				clearGroupList();
				clearMovementEdges();
			}
			quantumLabel.setText("Quantum: "+ quantum);
			quantumLabel.repaint();
			frameInstance.pack();
			currentQuantum = quantum;
		}
		
	}
	private static void clearGroupList() {
		synchronized (groupListModel) {
			groupListModel.clear();
		}
	}

	public static void addGroup(String cellLocation, int numberOfUsers)
	{
		synchronized (groupListModel) {
			groupListModel.addElement("cell - " + cellLocation +", users: "+ numberOfUsers);
		}
		
		synchronized (frameInstance) {
			groupList.repaint();
			frameInstance.pack();
		}
		
	}
	
	private static void clearMovementEdges() 
	{
		synchronized(edges)
		{
			// draw number of users moved on edge
			if(edges != null)
			{
			    edges = new ArrayList <String> (CellularGraphView.g.getEdges());
	
				ListIterator<String> iter = edges.listIterator();
	
				try{
					while(iter.hasNext())
					{
						String itEdge = iter.next();
						String[] splitted = itEdge.split(" ");
						if(splitted.length != 1)
						{
							String[] splitted2 = splitted[0].split("-");
							CellularGraphView.g.removeEdge(itEdge);
							CellularGraphView.g.addEdge(splitted[0],splitted2[0], splitted2[1], EdgeType.DIRECTED );
						}
					}
			} catch(Exception ex)
			{
				ex.printStackTrace();
			}
					
			vv.repaint();
			}
		}
	}

	private static void setupGraph(String inputFile)
	{

		new CellularGraphView(inputFile);
		layout = new CircleLayout<String, String>(CellularGraphView.g);
	    layout.setSize(new Dimension(dimensionX, dimensionY)); 
	    vv = new BasicVisualizationServer<String,String>(layout);
	    	    vv.getRenderContext().setVertexLabelTransformer((new Transformer<String, String>() {

			@Override
            public String transform(String e) {
            	return e;
            }
        }));
	    vv.getRenderer().setEdgeRenderer(new BasicEdgeRenderer<String, String>());

		vv.getRenderContext().setEdgeDrawPaintTransformer(new ConstantTransformer(Color.LIGHT_GRAY));

	    vv.getRenderContext().setEdgeLabelTransformer(new Transformer<String, String>() {

			@Override
			public String transform(String arg0) {
				String[] splitted = arg0.split(" ");
				if(splitted.length == 1)
				{
					return arg0;
				}
				else
				{

					return '*'+arg0+'*';
				}
			}

        });
	    
	}
}
