import jade.core.*;
import jade.core.behaviours.TickerBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;

public class UserManagerAgent extends Agent{
	
	
	int movementQuantums=0;
	
	protected void setup() {
		System.out.println("UserManagerAgent :	" + getAID().getName()
				+ " is ready.");
		Object[] args = getArguments();
		if (args != null && args.length > 0) {
			String inputFile = (String) args[0];
			System.out.println("Trying to parse " + inputFile);
			parseUserRoutes(inputFile);
			
			//User movement behaviour
			addBehaviour(new TickerBehaviour(this, 2000) {
				
				protected void onTick() {
					movementQuantums++;
					System.out.println("UserManagerAgent: Quantum " + movementQuantums);
				
					DFAgentDescription template = new DFAgentDescription();
					ServiceDescription sd = new ServiceDescription();
					sd.setName("C1");
					template.addServices(sd);
					try {
						DFAgentDescription[] result = DFService.search(ellAgent,
								template);
						System.out
								.println("Found the following cell agents:");
						AID[] cellAgents = new AID[result.length];

						for (int i = 0; i < result.length; ++i) {
							cellAgents[i] = result[i].getName();
							System.out.println(cellAgents[i].getName());
						}
					} catch (FIPAException fe) {
						fe.printStackTrace();
					}
					
				     ACLMessage msg = new ACLMessage(ACLMessage.INFORM);
				     msg.setContent( "bla...bla...bla" );
				     msg.addReceiver( new AID( "C" + 1, AID.ISLOCALNAME) );
				     send(msg);
					
					
				}
			});
			
		} else {
			System.out.println("No input file specified");
			doDelete();
		}
	}
	
	//Method to parse the routes of users
	void parseUserRoutes(String inputFile)
	{
		
	}

}
